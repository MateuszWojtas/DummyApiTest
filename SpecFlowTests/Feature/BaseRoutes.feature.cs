// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTests.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BaseRoutes", Description="\tIn order to check routing\r\n\tAs a client API\r\n\tI want to see eror when bad HTTP m" +
        "ethod or route is passed in request", SourceFile="Feature\\BaseRoutes.feature", SourceLine=0)]
    public partial class BaseRoutesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BaseRoutes.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BaseRoutes", "\tIn order to check routing\r\n\tAs a client API\r\n\tI want to see eror when bad HTTP m" +
                    "ethod or route is passed in request", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyBadRoutes(string route, string method, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InvalidScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bad routes", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("I have base page url with route {0} and method {1}", route, method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("Request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("Result should return error message: Not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 0", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant0()
        {
#line 7
this.VerifyBadRoutes("\\employees", "PUT", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 1", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant1()
        {
#line 7
this.VerifyBadRoutes("\\employees", "PATCH", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 2", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant2()
        {
#line 7
this.VerifyBadRoutes("\\employees", "DELETE", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 3", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant3()
        {
#line 7
this.VerifyBadRoutes("\\employees", "POST", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 4", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant4()
        {
#line 7
this.VerifyBadRoutes("\\employee\\", "GET", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 5", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant5()
        {
#line 7
this.VerifyBadRoutes("\\employee\\1", "PUT", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 6", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant6()
        {
#line 7
this.VerifyBadRoutes("\\employee\\1", "PATCH", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 7", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant7()
        {
#line 7
this.VerifyBadRoutes("\\employee\\1", "DELETE", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify bad routes, Variant 8", new string[] {
                "InvalidScenario"}, SourceLine=13)]
        public virtual void VerifyBadRoutes_Variant8()
        {
#line 7
this.VerifyBadRoutes("\\employee\\1", "POST", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyErrorWhenNoSessionDataIsNOTSent(string request, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "invalidScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify error when no session data is NOT sent", null, @__tags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given(string.Format("I Prapare {0} that require session data without it", request), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.When("Request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("Result should return error message: Not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify error when no session data is NOT sent, Variant 0", new string[] {
                "invalidScenario"}, SourceLine=32)]
        public virtual void VerifyErrorWhenNoSessionDataIsNOTSent_Variant0()
        {
#line 26
this.VerifyErrorWhenNoSessionDataIsNOTSent("SingleRead", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify error when no session data is NOT sent, Variant 1", new string[] {
                "invalidScenario"}, SourceLine=32)]
        public virtual void VerifyErrorWhenNoSessionDataIsNOTSent_Variant1()
        {
#line 26
this.VerifyErrorWhenNoSessionDataIsNOTSent("Update", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify error when no session data is NOT sent, Variant 2", new string[] {
                "invalidScenario"}, SourceLine=32)]
        public virtual void VerifyErrorWhenNoSessionDataIsNOTSent_Variant2()
        {
#line 26
this.VerifyErrorWhenNoSessionDataIsNOTSent("Update", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify when no cookie is sent", new string[] {
                "invalidScenario"}, SourceLine=38)]
        public virtual void VerifyWhenNoCookieIsSent()
        {
            string[] tagsOfScenario = new string[] {
                    "invalidScenario"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify when no cookie is sent", null, new string[] {
                        "invalidScenario"});
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given("I Prepare request for single employee read without cookies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When("Request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("Erros is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
